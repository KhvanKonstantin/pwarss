buildscript {
    ext {
        kotlinVersion = '1.3.61'
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.pwarss'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.security:spring-security-crypto')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    implementation('org.jetbrains.kotlin:kotlin-reflect')

    runtimeOnly('org.postgresql:postgresql')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task checkApplicationProperitesExist {
    doLast {
        def file = file("${project.projectDir}/config/application.properties")
        if(!file.exists()){
            throw new GradleException("bootRun requires properties file. See backend/config/application.template.properties for instructions")
        }
    }
}

task checkTestProperitesExist {
    doLast {
        def file = file("${project.projectDir}/src/test/config/test.properties")
        if(!file.exists()){
            throw new GradleException("testing requires test properties file. See backend/src/text/config/test.template.properties for instructions")
        }
    }
}

bootJar {
    from('../frontend/build/') {
        into 'BOOT-INF/classes/static'
    }
}

clean.dependsOn(":frontend:cleanFrontend")
bootJar.dependsOn(":frontend:buildFrontend")

bootRun.dependsOn(checkApplicationProperitesExist)
test.dependsOn(checkTestProperitesExist)
